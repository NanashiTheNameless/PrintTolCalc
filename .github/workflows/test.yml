name: Test with tox on all supported Python versions

on:
  push:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  test-and-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f
        with:
          fetch-depth: 0

      - name: Install pyenv dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make build-essential libssl-dev zlib1g-dev \
            libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
            libncurses5-dev libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev

      - name: Install pyenv and Python versions
        shell: bash
        run: |
          curl https://pyenv.run | bash

          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init -)"
          eval "$(pyenv virtualenv-init -)"

          echo "Now installing Python 3"
          pyenv install --skip-existing 3
          echo "Now installing Python 3.5"
          pyenv install --skip-existing 3.5
          echo "Now installing Python 3.6"
          pyenv install --skip-existing 3.6
          echo "Now installing Python 3.7"
          pyenv install --skip-existing 3.7
          echo "Now installing Python 3.8"
          pyenv install --skip-existing 3.8
          echo "Now installing Python 3.9"
          pyenv install --skip-existing 3.9
          echo "Now installing Python 3.10"
          pyenv install --skip-existing 3.10
          echo "Now installing Python 3.11"
          pyenv install --skip-existing 3.11
          echo "Now installing Python 3.12"
          pyenv install --skip-existing 3.12
          echo "Now installing Python 3.13"
          pyenv install --skip-existing 3.13
          echo "Now installing Python 3.14-dev"
          pyenv install --skip-existing 3.14-dev || true
          echo "Now installing Python 3.15-dev"
          pyenv install --skip-existing 3.15-dev || true

          pyenv global 3 3.5 3.6 3.7 3.8 3.9 3.10 3.11 3.12 3.13 3.14-dev 3.15-dev
          pyenv rehash

          echo "PYENV_ROOT=$PYENV_ROOT" >> $GITHUB_ENV
          echo "PATH=$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH" >> $GITHUB_ENV

          echo "Available python versions:"
          pyenv versions

          echo "Shims in PATH:"
          ls -l $PYENV_ROOT/shims/python*

      - name: Install tox
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install tox

      - name: Run tox
        shell: bash
        run: |
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init -)"
          eval "$(pyenv virtualenv-init -)"
          tox

      - name: Check for formatting changes
        id: format_changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          if ! git diff --quiet; then
            echo "CHANGES=true" >> "$GITHUB_OUTPUT"
          else
            echo "No formatting changes."
          fi

      - name: Create PR for formatting fixes
        if: steps.format_changes.outputs.CHANGES == 'true'
        run: |
          BRANCH=fix/format-$(date +%s)
          git checkout -b "$BRANCH"
          git add .
          git commit -m "Auto-format code using tox"
          git push origin "$BRANCH"

          gh pr create --title "Auto-format code using tox" \
                       --body "This PR applies formatting fixes from tox." \
                       --base main --head "$BRANCH"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
